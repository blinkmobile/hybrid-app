(function () {    "use strict";    var app = WinJS.Application;    var activation = Windows.ApplicationModel.Activation;    var nav = WinJS.Navigation;    var sched = WinJS.Utilities.Scheduler;    var ui = WinJS.UI;    app.onactivated = function (args) {      if (args.detail.kind === activation.ActivationKind.launch) {        Windows.ApplicationModel.Package.current.installedLocation.getFileAsync("www\\config.json").done(          function (file) {            Windows.Storage.FileIO.readTextAsync(file).done(              function (fileContent) {                var config = JSON.parse(fileContent);                for (var key in config) {                  window[key] = config[key];                }                // Set up offline                document.addEventListener("deviceready", launchApp, false);              },              function (err) {                console.error(err);              }            );          },          function (err) {            console.error(err);          }        );        nav.history = app.sessionState.history || {};        nav.history.current.initialPlaceholder = true;        // Optimize the load of the application and while the splash screen is shown, execute high priority scheduled work.        ui.disableAnimations();        var p = ui.processAll().then(function () {          return sched.requestDrain(sched.Priority.aboveNormal + 1);        }).then(function () {          ui.enableAnimations();        });        args.setPromise(WinJS.Promise.join([p, window.offlineReady])          .then(function () {            console.log('Application ready to start');          })        );      } else {        console.log('Back from photos')        if (args.detail.files && args.detail.files[0] && WinJS.Application.sessionState.cameraCallbacks) {          var fileReader = new FileReader();          fileReader.onloadend = function (url) {            BlinkGap.postCommandResult(WinJS.Application.sessionState.cameraCallbacks.success, url.currentTarget.result);          }          fileReader.readAsDataURL(args.detail.files[0])        } else {          BlinkGap.postCommandResult(WinJS.Application.sessionState.cameraCallbacks.error);        }      }    };    Windows.UI.WebUI.WebUIApplication.addEventListener("resuming", function (e) {      BlinkGap.postMessage({        command: 'emitEvent',        arguments: ['resume']      });    }, false);    // WinJS.Navigation.addEventListener("navigated", function (eventObject) {    //   var url = eventObject.detail.location;    //   var host = document.getElementById("answerSpaceFrameContainer");    //   // Call unload method on current scenario, if there is one    //   host.winControl && host.winControl.unload && host.winControl.unload();    //   WinJS.Utilities.empty(host);    //   eventObject.detail.setPromise(    //       WinJS.UI.Pages.render(url, host, eventObject.detail.state).then(function () {    //           WinJS.Application.sessionState.lastUrl = url;    //       })    //   );    // });    app.oncheckpoint = function (args) {      BlinkGap.postMessage({        command: 'emitEvent',        arguments: ['pause']      });    };    app.onerror = function (err) {      console.error('app.onerror:', err);      return true;    };    window.onerror = function (err, url, line) {      console.error('window.onerror:', err, url, line);      return true;    };    function launchApp(){      //Set application config    window.offline = new Offline();                window.offline.setOptions(                  function () {                    window.offline.checkForUpdates(                      function (urls) {                        if (urls) {                          console.log('Fetching new offline resources');                          window.offline.fetchResources(                            function () {                              console.log('Offline data available');                              window.offline.listResources(                                function (resources) {                                  console.log('Setting webview URL to: ' + resources[window.answerSpace]);                                  navToURL(resources[window.answerSpace]);                                },                                function (err) {                                  console.error('#listResources failed', err);                                }                              );                            }, function (err) {                              console.error('#fetchResources failed', err);                            }, {                              uris: urls                            }                          );                        } else {                          console.log('Offline resources already cached');                          window.offline.listResources(                            function (resources) {                              console.log('Setting webview URL to: ' + resources[window.answerSpace]);                              navToURL(resources[window.answerSpace]);                            },                            function (err) {                              console.error('#listResources failed', err);                            }                          );                        }                      },                      function (err) {                        console.error('#checkForUpdates failed', err);                      }                    );                  },                  function (err) {                    console.error('#setOptions failed', err);                  },                  {                    initialURL: window.answerSpace                  }                );    }    function navToURL(url){      //windows navigate      // var body = document.getElementsByTagName('body');      // var div = document.createElement('div');      // div.setAttribute("data-win-control", "Application.PageControlNavigator");      // var container = document.getElementById('webview');      // container.navigate(url);      //container.setAttribute("data-win-options", "{home: '"+url+"'}");      // document.body.appendChild(div);      //return nav.navigate(url);      //attach iframe      var container = document.getElementById('answerSpaceFrameContainer');      var iframe = document.createElement('iframe');      iframe.src = url;      iframe.sandbox = "allow-scripts allow-forms allow-same-origin";      container.appendChild(iframe);      //a href      // var linkElement = document.getElementById('answerSpaceFramelink');      // linkElement.href = url;      // return linkElement.click();    }    app.start();})();